using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Canada_Simulator
{
    class SaveSystem
    {
        // Saving system. We use XML files as gamesaves.
        // SaveGame
        public static void SaveGame(bool emergency = false)
        {
            XmlWriterSettings settings = new XmlWriterSettings();
            settings.Indent = true;
            string saveFile;
            // Start an XML writer and put all our character's data into it.
            Tools.Log("Saving game...");
            if (!emergency) { saveFile = "Data\\Gamesave.xml"; } else { saveFile = "Data\\Gamesave_RECOVERY.xml"; }
            XmlWriter writer = XmlWriter.Create(saveFile, settings);
            writer.WriteStartDocument();
            writer.WriteComment("This file was generated by Canada Simulator. It is a gamesave file." + NewLineStrng() + "Edit at your own risk, it is your fault if you screw up your gamesave.");
            writer.WriteStartElement("SaveDetails");
            writer.WriteAttributeString("Version", Assembly.GetExecutingAssembly().GetName().Version.ToString());
            writer.WriteStartElement("Character");
            writer.WriteAttributeString("Name", Variables.plyName);
            writer.WriteAttributeString("Exp", Variables.plyExp.ToString());
            writer.WriteAttributeString("Health", Variables.plyHealth.ToString());
            writer.WriteAttributeString("Energy", Variables.plyEnergy.ToString());
            writer.WriteAttributeString("Armor", Variables.plyArmor.ToString());
            writer.WriteAttributeString("CurrentMission", Variables.plyCurrentMission.ToString());
            writer.WriteStartElement("Currency");
            writer.WriteAttributeString("Dollars", Variables.plyDollars.ToString());
            writer.WriteAttributeString("Syrup", Variables.plySyrup.ToString());
            writer.WriteStartElement("Inventory");
            writer.WriteAttributeString("Melee", Variables.plyMelee.ToString());
            writer.WriteEndElement();
            writer.WriteEndDocument();
            // Flush and close the writer when saving is complete.
            Tools.Log("Save complete!");
            writer.Flush();
            writer.Close();
            if (!emergency) Tools.Print("Game saved!", true, ConsoleColor.Green);
        }

        // Save file reading system
        // LoadGame
        public static void LoadGame()
        {
            Tools.Log("Loading game...");
            try
            {
                using (XmlReader reader = XmlReader.Create("Data\\Gamesave.xml"))
                {
                    // Player Stats
                    reader.ReadToFollowing("Character");
                    reader.MoveToFirstAttribute();
                    Variables.plyName = reader.Value;
                    reader.MoveToNextAttribute();
                    Variables.plyExp = int.Parse(reader.Value);
                    reader.MoveToNextAttribute();
                    Variables.plyHealth = int.Parse(reader.Value);
                    reader.MoveToNextAttribute();
                    Variables.plyEnergy = int.Parse(reader.Value);
                    reader.MoveToNextAttribute();
                    Variables.plyArmor = int.Parse(reader.Value);
                    reader.MoveToNextAttribute();
                    Variables.plyCurrentMission = int.Parse(reader.Value);
                    // Currency
                    reader.ReadToFollowing("Currency");
                    reader.MoveToFirstAttribute();
                    Variables.plyDollars = int.Parse(reader.Value);
                    reader.MoveToNextAttribute();
                    Variables.plySyrup = int.Parse(reader.Value);
                    // Inventory
                    reader.ReadToFollowing("Inventory");
                    reader.MoveToFirstAttribute();
                    Variables.plyMelee = int.Parse(reader.Value);
                    Tools.Log("Loaded game \"" + Variables.plyName + "\"");
                    Tools.Log("Save file version is " + /*SaveVersion*/ "[UNKNOWN]");
                }
            }
            catch (Exception e)
            {
                Tools.Log("Could not load save file: " + e.Message, "Fatal");
                Tools.Clear(false);
                Tools.Print("Could not load save file:" + Environment.NewLine + e.Message);
                Tools.Pause();
                FailSafe();
            }
            Area_Init();
        }

        // A new game generator.
        // NewGame
        public static void NewGame()
        {
            Tools.Log("Generating new save...");
            Tools.Clear(false, false);
            // Get what the player's name will be
            while (true)
            {
                Tools.Print("What would you like your character's name to be?", true);
                Tools.GetInput();
                // Make sure it isn't too long
                if (Variables.EnteredText.Length > 15)
                {
                    Tools.Clear(false);
                    Tools.Print("Your character's name may not be longer than 15 characters!", false);
                    Tools.Pause();
                    Tools.Clear(false);
                }
                else
                    break;
            }
            Tools.Log("Generating new save with character name \"" + Variables.EnteredText + "\"");
            // Set name
            Variables.plyName = Variables.EnteredText;
            // Set default attribs
            Variables.plyExp = 0;
            Variables.plyHealth = 100;
            Variables.plyEnergy = 100;
            Variables.plyArmor = 0;
            // Set default currency
            Variables.plyDollars = 500;
            Variables.plySyrup = 15;
            // Set default inventory
            Variables.plyMelee = 0;
            // Set missions
            Variables.plyCurrentMission = 1;
            // Save the game.
            SaveGame();
            // Send us into the game.
            Area_Init(true);
        }
    }
}
